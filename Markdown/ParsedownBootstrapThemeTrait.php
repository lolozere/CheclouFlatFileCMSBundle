<?php
/**
 * Created by PhpStorm.
 * User: lolozere
 * Date: 22/03/19
 * Time: 14:11
 */

namespace Checlou\FlatFileCMSBundle\Markdown;

/**
 * Trait to add bootstrap theme to html generated
 *
 * To init, call $this->addBlockType('!', 'Notices', true, false); in the constructor of your Parsedown class
 *
 */
trait ParsedownBootstrapThemeTrait {

    protected $base_classes;
    protected $level_classes;

    protected function blockQuote($Line)
    {
        $block = parent::blockQuote($Line);
        if ( ! isset($block))
        {
            return null;
        }
        $block['element']['attributes']['class'] = 'blockquote';

        return $block;
    }

    protected function blockTable($Line, array $Block = null)
    {
        $table = parent::blockTable($Line, $Block); // TODO: Change the autogenerated stub
        if ( ! isset($table))
        {
            return null;
        }
        $table['element']['attributes']['class'] = 'table';

        return $table;
    }

    protected function blockNotices($Line) {
        $this->level_classes = ["primary", "danger", "success", "secondary"];
        $this->base_classes  = "alert";
        if (preg_match('/^(!{1,'.count($this->level_classes).'})[ ]+(.*)/', $Line['text'], $matches))
        {
            $level = strlen($matches[1]) - 1;
            // if we have more levels than we support
            if ($level > count($this->level_classes)-1)
            {
                return;
            }
            $text = $matches[2];
            $base_classes = (empty($this->base_classes)) ? '' : str_replace(',', ' ', $this->base_classes) . ' ';
            $Block = [
                'element' => [
                    'name' => 'div',
                    'handler' => 'lines',
                    'attributes' => [
                        'class' => $base_classes . " alert-" . $this->level_classes[$level],
                        'role' => 'alert'
                    ],
                    'text' => (array) $text,
                ],
            ];
            return $Block;
        }
    }

    protected function blockNoticesContinue($Line, array $Block) {
        if (isset($Block['interrupted']))
        {
            return;
        }
        if ($Line['text'][0] === '!' and preg_match('/^(!{1,'.count($this->level_classes).'})(.*)/', $Line['text'], $matches))
        {
            $Block['element']['text'] []= ltrim($matches[2]);
            return $Block;
        }
    }

    protected function inlineImage($excerpt) {
        $excerpt = parent::inlineImage($excerpt);
        if ( ! isset($excerpt))
        {
            return null;
        }
        if (isset($excerpt['element']['attributes']['class']))
            $classes = explode(' ', $excerpt['element']['attributes']['class']);
        $classes[] = 'img-fluid';
        $excerpt['element']['attributes']['class'] = join(' ', array_unique($classes));

        return $excerpt;

    }

}