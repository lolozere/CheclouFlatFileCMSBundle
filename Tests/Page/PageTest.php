<?php

namespace Checlou\FlatFileCMSBundle\Tests\Page;

use Checlou\FlatFileCMSBundle\CMS\Page\File\MarkdownFile;
use Checlou\FlatFileCMSBundle\CMS\Page\Page;
use Checlou\FlatFileCMSBundle\CMS\Pages;
use PHPUnit\Framework\TestCase;

class PageTest extends TestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        if (!file_exists(join(DIRECTORY_SEPARATOR, [sys_get_temp_dir(), md5(__CLASS__)])))
            mkdir(join(DIRECTORY_SEPARATOR, [sys_get_temp_dir(), md5(__CLASS__)]), 0777, true);
    }

    public function testGetPublishedAt() {
        $pages = new Pages(__DIR__ . '/../DataFixtures/files/published_at');

        // Page with date atttribute Y-m-d
        $page = $pages->find(['slug' => 'date.html']);
        $this->assertEquals("2022-10-31", $page[0]->getPublishedAt()->format("Y-m-d"));

        // Page with date atttribute date format U
        $page = $pages->find(['slug' => 'date-u.html']);
        $this->assertEquals("2022-06-14", $page[0]->getPublishedAt()->format("Y-m-d"));

        // Page with published_at atttribute Y-m-d H:i
        $page = $pages->find(['slug' => 'published-at.html']);
        $this->assertEquals("2022-10-30 10:15", $page[0]->getPublishedAt()->format("Y-m-d H:i"));

        // Page with no-date / default getCreatedAt
        $page = $pages->find(['slug' => 'no-date.html']);
        $this->assertEquals($page[0]->getPublishedAt(), $page[0]->getCreatedAt());

        // Return the getcreated date (filectime)
        $page = $pages->find(['slug' => 'date-invalid.html']);
        $this->assertEquals($page[0]->getPublishedAt(), $page[0]->getCreatedAt(), "Date invalid : expect the getCreated as default value");

    }

    public function testContentAndSummary() {
        /**
         * Create files content test
         */
        $file_without_summary = <<<FILE
---
title: "Page"
---

Contenu complet d'une page.
FILE;
        $file_without_summary_path = join(DIRECTORY_SEPARATOR, [sys_get_temp_dir(), md5(__CLASS__), "file_without_summary_path.md"]);
        file_put_contents($file_without_summary_path, $file_without_summary);
        $file_with_summary = <<<FILE
---
title: "Page"
---

Ceci est un résumé

===

Et voici la suite du contenu
FILE;
        $file_with_summary_path = join(DIRECTORY_SEPARATOR, [sys_get_temp_dir(), md5(__CLASS__), "file_with_summary_path.md"]);
        file_put_contents($file_with_summary_path, $file_with_summary);

        /**
         * Test
         */
        $page_without_summary = Page::build(MarkdownFile::instance($file_without_summary_path), $this->createMock(Pages::class));
        $this->assertEquals("Contenu complet d'une page.", $page_without_summary->getContent());
        $this->assertEquals("Contenu complet d'une page.", $page_without_summary->getContentAfterSummary());
        $this->assertEquals('', $page_without_summary->getSummary());

        $page_with_summary = Page::build(MarkdownFile::instance($file_with_summary_path), $this->createMock(Pages::class));
        $this->assertStringStartsWith("Ceci est un résumé", $page_with_summary->getContent());
        $this->assertStringEndsWith("Et voici la suite du contenu", $page_with_summary->getContent());
        $this->assertEquals("Et voici la suite du contenu", $page_with_summary->getContentAfterSummary());
        $this->assertEquals('Ceci est un résumé', $page_with_summary->getSummary());
    }

}